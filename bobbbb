#!/bin/bash

nick="$(basename $0)"
host="$1"
port="$2"
chan="$3"

if [ ! "$2" ]; then
	echo "usage: $(basename $0) host port"
	exit 1
fi

if ! exec 3<> /dev/tcp/$host/$port; then
	echo "$(basename $0): unable to connect to $host:$port"
	exit 1
fi

exec <&3 >&3-

echo "USER $nick $nick $nick :$nick"
echo "NICK $nick"
echo "JOIN $chan"

while read line; do
	[[ "$line" =~ ^PING\ :(.*)$ ]] && echo "PONG :${BASH_REMATCH[1]}"
	
	if [[ "$line" =~ ^:([^\!]*)\!([^\ ]*)\ ([^\ ]*)\ ([^:]*)\ :(.*)$ ]]; then
		sender=${BASH_REMATCH[1]}
		server=${BASH_REMATCH[2]}
		command=${BASH_REMATCH[3]}
		args=(${BASH_REMATCH[4]})
		contents=${BASH_REMATCH[5]}

		case $command in
		KICK) [[ ${args[1]} == $nick ]] && echo "JOIN ${args[0]}" ;;
		PART) [[ $sender == $nick ]] && echo "JOIN ${args[0]}" ;;

		PRIVMSG)
			echo "$contents" >> "logs/$sender"

			[[ $contents =~ ^\!([^\ ]+)\ (.*) ]] && case ${BASH_REMATCH[1]} in
			mock)
				name=${BASH_REMATCH[2]//[^-a-zA-Z0-9\[\]\\\`_^\{\}|]}
				[[ -f "logs/$name" ]] || touch "logs/$name"
				echo "PRIVMSG $chan :\""$(./markov -d 1 -n 20 < "logs/$name") "\"-- $name"
				;;
			*) echo "PRIVMSG $sender :I don't understand '${BASH_REMATCH[1]}'" ;;
			esac
			;;
		esac
	fi
done
